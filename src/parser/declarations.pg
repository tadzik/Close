# $Id$

# Probably should be "simple-declaration"
rule declaration {
	<decl_specifier>*		# Default to 'auto'.
	<init_declarator_list>	# At least one of these, too.
}

rule decl_specifier {
	| <spec=storage_class_specifier>	{*}
	| <spec=type_specifier>		{*}
	| <spec=function_specifier>	{*}
}

rule function_specifier {
	| <spec=INLINE>		{*}
	| <spec=METHOD>		{*}
}

rule storage_class_specifier {
	| <spec=DYNAMIC>		{*}
	| <spec=EXTERN>		{*}
	| <spec=LEXICAL>		{*}
	| <spec=REGISTER>	{*}
	| <spec=STATIC>		{*}
	| <spec=TYPEDEF>		{*}
}

rule type_specifier {
	| <builtin_type>		{*}
#	| <class_specifier>	{*}		# class/struct/union foo { ... }
	| <cv_qualifier>	{*}
#	| <enum_specifier>	{*}
#	| <elaborated_type_specifier> {*}   # "struct foo"
#	| <type_name>	{*}
#	| <typename_specifier> {*}		# 'typename' othervar
}

rule builtin_type {
	| <name=AUTO>		{*}
	| <name=CLASS>		{*}
	| <name=FLOAT>		{*}
	| <name=INT>		{*}
	| <name=PMC>		{*}
	| <name=STRING>		{*}
	| <name=VOID>		{*}
}

rule cv_qualifier {
	| <qualifier=CONST>	{*}
	| <qualifier=VOLATILE>	{*}
}

rule type_name {
	<qualified_identifier>
	{*}
}

rule init_declarator_list {
	<init_declarator> [ ',' <init_declarator> ]*
	{*}
}

rule init_declarator {
	<declarator> <initializer>?
	{*}
}

rule declarator {
{{ say "Hello, declaraTOR!" }}
	<decl_pointer>* <direct_declarator> <decl_postfix>
	{*}
}

rule decl_pointer {
	'*' <cv_qualifier>*		{*}
}

rule direct_declarator {
	| '(' <declarator> ')'		{*}
	| <declarator_name>	{*}
}

rule decl_postfix {
	| '(' <parameter_decl_list> ')'	{*}
	| '[' <array_or_hash_decl> ']'	{*}
}

rule array_or_hash_decl {
	[ $<hash>='%'		{*}
	| <expression>		{*}
	|				{*}
	]
}

rule initializer {
	<assign_expr>		{*}
}
