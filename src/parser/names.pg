# $Id$

=head2 Names

The C<IDENTIFIER> token, described above, defines a simple name. For many 
symbols, this is sufficient. E.g., 

    namespace std {
        int strlen(string s) {
            return elements(s);
        }
    }
    
In the example code, the namespace name (C<std>) is an C<IDENTIFIER>, the 
function name (C<strlen>) is an C<IDENTIFIER>, and the parameter name (C<s>) 
is an C<IDENTIFIER>.

But Close recognizes several special cases. First, there are names that require
combining identifiers. A complex namespace name looks like C<Foo::Bar>. Second,
there are punctuated names, such as the C<:flat> adverb. Finally, there are 
I<semantic> distinctions, such as the identifiers used in declarations (which
may or may not already be in the symbol table) and those used as terms in an 
expression, which I<must> be previously defined.

=head3 Aliases

Nearly all symbols in Close may be declared with an B<alias>. An alias is 
simply a name that is easier to type or use in Close. The compiler will 
translate references to the alias into references to the original name. Thus, 
code which needs to refer to an attribute called C<object.'$!LINE'> could 
declare an alias for the attribute instead, and refer to C<object.line>.

=rule new_alias_name

Every alias must be a C<BAREWORD>, in keeping with their simplifying purpose.
In fact, aliases are just symbol names, and so they will be looked up as such. 
The C<new_alias_name> token is used only in declarations.

=cut

token new_alias_name {
	<alias=BAREWORD> {*}
}

=head3 Labels

Labels are targets for local branches. They are used in C<goto_statement>s,
and C<labeled_statement>s.

=rule label_name

A label is meaningful only within a subroutine. This means there is no reason to 
permit (or encourage) the use of unusual label names.Every label must be a 
C<BAREWORD>.

=cut

token label_name {
	<label=BAREWORD> {*}
}

=head3 High-level Language Names

As specified by the Parrot documentation, HLL names are all lower case, and may
not begin with an underscore. (Underscored names are reserved for HLL helper 
functions: 'tcl' reserves '_tcl', etc.)

=token hll_name

Close allows quoted HLL names to permit naming HLLs that may conflict with 
Close language keywords. In addition, Close permits leading underscores so that
other HLLs can write their helper functions in Close.

=cut

token hll_name {
	<IDENTIFIER> {*}
}

=head3 Namespaces

Namespaces are a fundamental part of the Parrot VM architecture. Every function
or variable has a namespace. Classes have an associated namespace; named classes
use the namespace with the same name.

Namespaces are hierarchial, although like Java there is no requirement that the 
parent-child relationship of two namespaces has any significance to the contents
of the namespaces.

The Parrot namespace tree is actually rooted just above the level of the HLLs. 
This gives each HLL a separate namespace. See the Parrot Design Documentation,
in particular I<PDD 21: Namespaces>, for details.
 
=token namespace_name

Individual (sub)namespaces can take on pretty much any name in Parrot. For this
reason, Close treats them as identifiers, permitting the C<QUOTED_LIT> form. 

=cut

token namespace_name {
	<IDENTIFIER> {*}		#= IDENTIFIER
}

=rule namespace_path

B<Note:> A I<namespace path> is not the same as a qualified identifier.
There are three ways to specify a namepace in Close.

=item # Rooted path

You may specify the HLL name, prefixed with the keyword 'hll' and a colon (:), 
plus the path of the namespace, delimited by double-colons (::). For example,
C<hll : close :: Foo :: Bar> is valid, although the spaces are optional.

This is called a I<rooted path> because the opcode used in PIR for this kind
of access would be C<get_root_global [ 'close' ; 'Foo' ; 'Bar' ], ...>

=item # Hll path

You may omit the HLL name if it is the same as the HLL name of the current
namespace. In this case, a leading double-colon ('::') indicates that the HLL
has been omitted, but the namespace path begins relative to the "hll root" 
namespace.

As a special case, the root namespace I<of an HLL> can be specified as C<::>
alone.

    namespace :: { ... }

(This is why C<namespace_path> is different from C<qualified_identifier>.)

=item # Relative path

Finally, you may specify a namespace by providing a relative path from the
current namespace to an inner namespace. 

    namespace A {
        namespace B { ... }
    }
    
=cut

rule namespace_path {
	| [ HLL ':' <hll_name> ]? 
		$<root>='::' 
		[ <path=namespace_name> [ '::' <path=namespace_name> ]* ]?
	{*}
	| <path=namespace_name> 
		[ '::' <path=namespace_name> ]*		
	{*}
}

=head3 Symbol Names

There are two basic classes of symbol name in Close. Some elements, such as 
formal parameters, aliases, and labels, are required to be short, unqualified 
identifiers -- C<BAREWORD>s -- while references to types, functions, and 
variables may include an elaborate I<qualified> name.

=rule simple_identifier

A simple identifier must fit the C<BAREWORD> specification (q.v.).

=cut

rule simple_identifier {
	<BAREWORD> {*}
}

=rule qualified_identifier

A qualified identifier may be a bareword, but it may also include an C<hll>,
C<namespace_name>, C<class> name, and the like. Any seqence that ends with
a bareword will be a qualified identifier. (A namespace path may end with 
the '::' indicating the hll root namespace. So a namespace path is I<not> 
parsed as a qualified identifier.)

=cut

rule qualified_identifier {
	[ [ HLL ':' <hll_name> ]? 			# Maybe an hll:close prefix
		$<root>='::' ]?			# Maybe rooted namespace
	<path=BAREWORD>			# Definitely a bareword.
		[ '::' <path=BAREWORD> ]*	# Maybe a namespace qualifier
	{*}
}

=rule declarator_name

A new declarator may need to express all or part of its name using quotes - for
example, a reference to any Perl variable must quote the sigil. Thus, 
I<declarator_name> is similar to C<qualified_identifier>, but any of the 
path elements may be quoted.

(Note that names requiring quotes are not valid for use beyond declarators. 
An alias must be created for any unusual symbol names.)

=cut

rule declarator_name {
	| [ HLL ':' <hll_name> ]?
		$<root>='::'
		[ <path=IDENTIFIER> 
			[ '::' <path=IDENTIFIER> ]* ]?
	{*}
	| <path=IDENTIFIER> [ '::' <path=IDENTIFIER> ]*
	{*}
}

=rule type_name

New types may be introduced in Close via the C<typedef> keyword, and by the 
tagged declaration of aggregates (classes, structs, unions, and enums). New 
types I<must> be declared prior to being used as a type specifier in a declaration.

=cut

rule type_name {
	<qualified_identifier> 
	{*}
	<?{{ 
		$P0 = get_hll_global [ 'close' ; 'Grammar' ; 'Actions' ], '$Is_valid_type_name'
		.return ($P0)
	}}>
}

#####


token short_ident {
	[ <id=BAREWORD> | <id=QUOTED_LIT> ]
	{*}
}

=head3 Adverbs

Adverbial modifiers can appear in several places in Close code. They
mostly appear in declarations, but they can also appear in argument 
lists.

For the most part, an adverb is recognized as a colon followed by 
an identifier: C<:method> is one example. 

# Note that a namespace_name is not the same as a qualified_identifier.
# Namespace names are "that part of the name before the
# trailing identifier." That means that '::' is a valid namespace
# name, but not a valid qualified_identifier.
#

rule adverbs {
	[ <adverb> ]*
	{*}
}

rule adverb {
	| [ $<extends>='extends' <args=qualified_identifier> [ ',' <args=qualified_identifier> ]* ] 
	  {*}
	| [
		<t_adverb>		# matches ":something", with no space inside
		[ '(' 
			[ <args=QUOTED_LIT> [ ',' <args=QUOTED_LIT> ]* 
			| <signature=string_literal: ')' >	# Support :multi(_, A)
			]
		')' ]?
	]
	{*}
}

token t_adverb {
	| ':' <ident> 
	| $<ident>='...'	# An alias for slurpy
	| $<ident>='?'	# An alias for optional:  func(a, b, c? = 1)
}
