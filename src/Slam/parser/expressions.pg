# $Id$

rule additive_expr {
    <term=mult_expr> [ <op=additive_op> <term=mult_expr> ]* 
    {*}
}

token additive_op {
	| <.SINGLE_PLUS>
	| <.SINGLE_MINUS>
}

rule arg_adverb {
	| <token=ADV_NAMED>	{*}
	| <token=ADV_FLAT>	{*}
}

rule arg_expr {
	[ <argname=IDENTIFIER>  <.COLON_SPACE> ]? 
	<expression> 
	<arg_adverb>*
	{*}
}

rule arg_list {
    [ <arg=arg_expr> [ ',' <arg=arg_expr> ]* ]?
    {*}
}

token asm_contents {
	'{{' ~ '}}'	<string_literal: '}}' >
	{*}
}

rule asm_expr {
	<.ASM> [ '(' ~ ')' <arg_list> ]?
	<asm=asm_contents>
	{*}
}

rule assign_expr {
	| <lhs=prefix_expr>
		<op=assign_op>
		<rhs=assign_expr>
		{*} #= assign_expr
	| <single=conditional_expr>
		{*} #= single
}

token assign_op {
	[ '='
	| '+=' | '-='
	| '*=' | '/=' | '%='
	| '<<=' | '>>=' | '&=' | '|=' | '^='
	| '&&=' | '||=' | 'and=' | 'or='
	]
}

rule bitwise_expr {
    <term=additive_expr>
    [ <op=bitwise_op>
        <term=additive_expr>
    ]*                                  {*} #= additive_expr
}

token bitwise_op {
    [ '&' | 'band' | '|' | 'bor' | '^' | 'bxor' | '<<' | '>>' ]
}

# rule built_in is defined in builtins.pg

rule compare_expr {
    <term=bitwise_expr> [ <op=compare_op> <term=bitwise_expr> ]*
    {*}
}

token compare_op {
	[ '<=' |'<' |  '==' | '!=' | '>=' | '>' ]
}

rule conditional_expr {
	<test=logical_expr>
	[	'?' <if=expression>
		':' <else=conditional_expr>
	]*
	{*}
}

token constant {
	| <STRING_LIT>		{*} #= STRING_LIT
	| <FLOAT_LIT>		{*} #= FLOAT_LIT
	| <INTEGER_LIT>		{*} #= INTEGER_LIT
}

rule expression {
	<assign_expr>                {*} #= assign_expr
}

rule logical_expr {
    <term=compare_expr> [ <op=logical_op> <term=compare_expr> ]*
    {*}
}

token logical_op {
	[ 'and' | '&&' | 'or' | '||' | 'xor' ]
}

rule mult_expr {
	<term=prefix_expr> [ <op=mult_op> <term=prefix_expr> ]*
	{*}
}

token mult_op {
    [ '*' | '/' | '%' ]
}

rule postfix_expr { 
	<term>
	[ <postfix=postfix_xcrement>
	| <postfix=postfix_member>
	| '(' ~ ')' <postfix=arg_list>
	| <postfix=postfix_index>
	# short if method-ptr, long if any-var
	#| $<op>='.*' <identifier>
	]*
	{*}
}

rule postfix_index {
	'[' <index=expression> ']' {*}
}

rule postfix_member {
	'.' <member=short_ident> {*}
}

token postfix_xcrement {
	$<op>=[ '++' | '--' ]	{*}
}

rule prefix_expr {
	| <prefix_op> <prefix_expr>	{*} #= prefix_expr
	| <built_in>				{*} #= built_in
	| <postfix_expr>			{*} #= postfix_expr
}

token prefix_op {
	[ '++' | '--' | '+' | '-' | '!' | 'not' >> ]
}

rule term {
	| '(' <expression> ')'		{*} #= expression
	| <asm_expr>		{*} #= asm_expr
	| <constant>			{*} #= constant
	| <qualified_identifier>	{*} #= qualified_identifier
}
